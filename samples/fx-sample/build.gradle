/*buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.3.0beta1'
    }
}*/
plugins {
    id 'kotlin'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.beryx.runtime' version '1.8.5'
}

def fxModules = ['base', 'controls', 'graphics']
/*
// FX plugin requires new JDK, and we're stuck with 11 because of Robolectric
id 'org.openjfx.javafxplugin' version '0.0.8'
javafx {
    version = '13'
    modules = fxModules.collect { 'javafx.' + it }
}
*/
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    fxModules.each { // ideally, should use plugin instead
        implementation "org.openjfx:javafx-$it:13:linux"
    }
    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation project(':fx-bindings')
    implementation project(':samples:logic-sample')
    implementation project(':persistence')
    implementation project(':properties')

    implementation "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
    implementation project(':sql')
    implementation "com.squareup.okio:okio:$okio_version"
}

application {
    mainClassName = 'net.aquadc.properties.fx.FxWithOurPropsSample'
    applicationName = 'propsSample'
    applicationDefaultJvmArgs = [
            '-client', '-XX:+TieredCompilation', '-Xverify:none', '-XX:CompileThreshold=100',
            '-Xss256K', '-Xms64M', '-Xmx64M', '-XX:MetaspaceSize=64M', '-XX:MaxMetaspaceSize=64M',
            '-XX:+UnlockExperimentalVMOptions', '-XX:+TrustFinalNonStaticFields'
    ]
}
shadowJar {
    exclude '/META-INF/proguard/'
    exclude '/META-INF/maven/'
    exclude '/META-INF/*.kotlin_module'

    archiveBaseName.set('propsSample')

//    finalizedBy 'minifiedJar'
}

def Properties props = new Properties()
try {
    props.load(project.rootProject.file('local.properties').newInputStream())
} catch (Exception ignored) {
    // skip on CI
}

/*task minifiedJar(type: proguard.gradle.ProGuardTask) {
    injars "build/libs/propsSample-all.jar"
    outjars "build/libs/propsSample-all.min.jar"
    ['java.base'
    , 'java.sql'
    , 'java.logging' // Okio, SQLite-JDBC use JUL O_o
    , 'java.desktop'
    , 'java.xml' // SVGs and some font machinery use SAX and DOM
    , 'jdk.unsupported' // Unsafe, required by UI toolkits
    ].forEach { mod ->
        libraryjars props.getProperty('jdk10') + "/jmods/${mod}.jmod"//(!**.jar;!module-info.class)'
    }

    dontwarn 'android.database.**,androidx.annotation.**' +
            ',okio.**' +
            ',net.aquadc.persistence.PlatformKt,net.aquadc.properties.executor.PlatformExecutors'
    dontobfuscate()
    optimizationpasses 1
    allowaccessmodification()

    // entry point
    keep 'public class net.aquadc.properties.fx.FxWithOurPropsSample { \
        public static void main(java.lang.String[]); \
    }'
    // reflection
    keep 'public class com.sun.javafx.tk.quantum.QuantumToolkit { !private *; }'
    keep 'public class com.sun.prism.**Pipeline { !private *; }'
    keep 'class com.sun.prism.**Factory { !private *; }'
    keep 'public class com.sun.glass.ui.**PlatformFactory { !private *; }'

    // JNI callbacks, `strings libwhatever.so | grep Java_`
    keepclasseswithmembernames([includedescriptorclasses: true], 'class * { native <methods>; }')
    keep 'public class com.sun.glass.ui.Pixels { <init>(int, int, java.nio.ByteBuffer); private void attachData(long); }'
    keep 'class com.sun.glass.ui.gtk.Gtk* { <methods>; }'
    keep 'class com.sun.scenario.effect.impl.sw.sse.SSE* { *** filter*(***); *** isSupported(***); }'
    keep 'class com.sun.javafx.iio.jpeg.JPEGImageLoader { <methods>; }'
    keep 'class com.sun.javafx.embed.swing.newimpl.SwingNodeInteropN { *** overrideNativeWindowHandle(***); }'
    keep 'class com.sun.prism.j2d.print.J2DPrinterJob { *** getAlwaysOnTop(***); }'
//    keep 'class sun.font.FontConfigManager.FontConfigFont { <init>(); }'
//    keep 'class com.sun.javafx.font.coretext.CGAffineTransform { <init>(); }'
//    keep 'class com.sun.javafx.font.coretext.CGPoint { <init>(); }'
//    keep 'class com.sun.javafx.font.coretext.CGSize { <init>(); }'
//    keep 'class com.sun.javafx.font.coretext.CGRect { <init>(); }'
//    keep 'class com.sun.javafx.geom.Path2D { <init>(int, byte[], int, float[], int); }'
//    keep 'class com.sun.javafx.font.freetype.FT_GlyphSlotRec { <init>(); }'
//    keep 'class com.sun.javafx.font.freetype.PangoGlyphString { <init>(); }'
//    keep 'class com.sun.glass.ui.Screen { <init>(***); }'
//    keep 'class com.sun.glass.ui.Size { <init>(***); }'
//    keep 'class com.sun.webkit.graphics.WCPoint { <init>(float, float); }'
//    keep 'class com.sun.webkit.text.TextCodec { <init>(java.lang.String); }'
//    keep 'class com.sun.webkit.graphics.WCRectangle { <init>(float, float, float, float); }'
//    keep 'class com.sun.glass.ui.CommonDialogs.FileChooserResult { <init>(); }'
//    keep 'class com.sun.media.jfxmediaimpl.NativeEqualizerBand { <init>(long); }'
//    keep 'class com.sun.glass.ui.gtk.GtkPixels { <init>(int, int, java.nio.ByteBuffer); }'
//    keep 'class com.sun.webkit.BackForwardList.Entry { <init>(long, long); }'
//    keep 'class com.sun.webkit.dom.JSObject { <init>(long, int); }'
    keep 'class com.sun.javafx.font.directwrite.* { *; }'
    keep 'class * { <init>(***); }' // DAMN IT! Still NoSuchMethodError("<init>"), gonna keep 'em all
}*/

runtime { // :runtimeZip task: build custom JDK
    options.set(['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'])
    javaHome.set(props.getProperty('jdk11')) // upgrade blocked by https://github.com/jfoenixadmin/JFoenix/issues/955
    jvmVersion.set(11)
    modules.set(['java.desktop', 'jdk.unsupported', /*"java.scripting",*/ /*"java.logging",*/ 'java.xml', 'java.sql'])
}
